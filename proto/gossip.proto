syntax = "proto3";
package gossip;
option go_package = "GossipSystemUtilization/proto;proto";

message PingRequest {
  string from_id = 1;
  uint64 seq     = 2;
}

message PingReply {
  bool  ok    = 1;
  int64 ts_ms = 2;
}

message PingReqRequest {
  string from_id    = 1;
  string target_addr = 2; // dove provare il Ping indiretto
  uint64 seq        = 3;
}

message PingReqReply {
  bool  ok    = 1;
  int64 ts_ms = 2;
}

service Gossip {
  rpc Join(JoinRequest) returns (JoinReply);
  rpc Ping(PingRequest) returns (PingReply);
  rpc PingReq(PingReqRequest) returns (PingReqReply);
  rpc ExchangeAvail(AvailBatch) returns (AvailBatch);
  rpc Probe(ProbeRequest)   returns (ProbeReply);
  rpc Commit(CommitRequest) returns (CommitReply);
  rpc Cancel(CancelRequest) returns (CancelReply);

}

message PeerInfo {
  string node_id = 1;
  string addr    = 2;  // host:port gRPC
  bool   is_seed = 3;
}

message Stats { // percentuali esposte (INCLUDONO background)
  string node_id = 1;
  double cpu_pct = 2;
  double mem_pct = 3;
  double gpu_pct = 4; // -1 se GPU assente
  int64  ts_ms   = 5;
}

message JoinRequest {
  string node_id     = 1;
  string addr        = 2;
  uint64 incarnation = 3;
  Stats  my_stats    = 4;
}

message JoinReply {
  repeated PeerInfo peers = 1;                 // campione iniziale
  repeated Stats    stats_snapshot = 2;        // alcune stats fresche
}

message AvailBatch {
  repeated Stats stats = 1;
}

message JobSpec {
  string job_id     = 1;
  string owner_id   = 2;
  double cpu_pct    = 3;   // richiesta in % (0..100)
  double mem_pct    = 4;   // richiesta in % (0..100)
  double gpu_pct    = 5;   // richiesta in % (0..100, 0 se non serve; -1 non usato qui)
  int64  duration_ms = 6;  // durata in millisecondi di tempo SIM
  string notes      = 7;   // libero (debug)
}

message ProbeRequest {
  JobSpec job = 1;
}

message ProbeReply {
  string node_id       = 1;
  bool   will_accept   = 2;   // true se il nodo può riservare quanto richiesto
  double score         = 3;   // più alto = meglio (headroom residuo)
  double headroom_cpu  = 4;   // % libera stimata (0..100)
  double headroom_mem  = 5;   // % libera stimata (0..100)
  double headroom_gpu  = 6;   // % libera stimata (0..100; -1 se GPU assente)
  string reason        = 7;   // motivazione (se rifiuto)
  int64  ts_ms         = 8;   // tempo SIM del peer che risponde
}

message CommitRequest {
  string job_id      = 1;
  string to_node_id  = 2;  // destinazione (peer che deve eseguire)
  double cpu_pct     = 3;
  double mem_pct     = 4;
  double gpu_pct     = 5;
  int64  duration_ms = 6;  // tempo SIM
}

message CommitReply {
  bool   ok     = 1;
  string reason = 2;
}

message CancelRequest {
  string job_id     = 1;
  string to_node_id = 2;
}

message CancelReply {
  bool   ok     = 1;
  string reason = 2;
}
